// Generated by LiveScript 1.5.0
/**
 * User: Roy
 * Date: 2016/9/19
 * Time: 10:25
 */
var natsLib, natsRpc, natsServers, clientB, _t_str, _t_json, _test_count, _sequence_count;
natsLib = require("../index.js");
natsRpc = new natsLib;
natsServers = ['nats://127.0.0.1:4222', 'nats://127.0.0.1:5222'];
clientB = natsRpc.Create(natsServers, "clientB", function(){
  console.log("[clientB]-->[init] >>> connected to nats");
});
_t_str = "hi";
_t_json = {
  aa: "abcdef",
  bb: 123,
  cc: true
};
_test_count = 10000 * 10;
_sequence_count = 100;
setTimeout(function(){
  var testString_count_max, testString_count, testString_start, testString;
  testString_count_max = _test_count;
  testString_count = 0;
  testString_start = Date.now();
  console.log("testString 1 sequence start");
  testString = function(){
    clientB.RpcAsync("testString", _t_str, function(err, ret){
      var diffTime, speed, testString_end;
      testString_count++;
      if (testString_count < testString_count_max) {
        if (testString_count % 10000 == 0) {
          diffTime = Date.now() - testString_start;
          speed = Math.round(testString_count / (diffTime / 1000));
        }
        testString();
      } else {
        testString_end = Date.now();
        diffTime = Date.now() - testString_start;
        speed = Math.round(_test_count / (diffTime / 1000));
        console.log("testString 1 sequence finished, count = " + _test_count + ", time = " + diffTime + "ms, speed = " + speed + "/s");
      }
    });
  };
  testString();
}, 1000 * 1);
setTimeout(function(){
  var testJson_count_max, testJson_count, testJson_start, testJson;
  testJson_count_max = _test_count;
  testJson_count = 0;
  testJson_start = Date.now();
  console.log("testJson 1 sequence start");
  testJson = function(){
    clientB.RpcAsync("testJson", _t_json, function(err, ret){
      var diffTime, speed, testJson_end;
      testJson_count++;
      if (testJson_count < testJson_count_max) {
        if (testJson_count % 10000 == 0) {
          diffTime = Date.now() - testJson_start;
          speed = Math.round(testJson_count / (diffTime / 1000));
        }
        testJson();
      } else {
        testJson_end = Date.now();
        diffTime = Date.now() - testJson_start;
        speed = Math.round(_test_count / (diffTime / 1000));
        console.log("testJson 1 sequence finished, count = " + _test_count + ", time = " + diffTime + "ms, speed = " + speed + "/s");
      }
    });
  };
  testJson();
}, 1000 * 15);
setTimeout(function(){
  var testString_count_max, testString_count, testString_start, consoleEndPrinted, testString, i$, to$;
  testString_count_max = _test_count;
  testString_count = 0;
  testString_start = Date.now();
  console.log("testString " + _sequence_count + " sequence start");
  consoleEndPrinted = false;
  testString = function(){
    clientB.RpcAsync("testString", _t_str, function(err, ret){
      var testString_end, diffTime, speed;
      testString_count++;
      if (testString_count < testString_count_max) {
        testString();
      } else {
        if (!consoleEndPrinted) {
          consoleEndPrinted = true;
          testString_end = Date.now();
          diffTime = Date.now() - testString_start;
          speed = Math.round(_test_count / (diffTime / 1000));
          console.log("testString " + _sequence_count + " sequence finished, count = " + _test_count + ", time = " + diffTime + "ms, speed = " + speed + "/s");
        }
      }
    });
  };
  for (i$ = 0, to$ = _sequence_count; i$ < to$; ++i$) {
    testString();
  }
}, 1000 * 30);
setTimeout(function(){
  var testJson_count_max, testJson_count, testJson_start, consoleEndPrinted, testJson, i$, to$;
  testJson_count_max = _test_count;
  testJson_count = 0;
  testJson_start = Date.now();
  console.log("testJson " + _sequence_count + " sequence start");
  consoleEndPrinted = false;
  testJson = function(){
    clientB.RpcAsync("testJson", _t_json, function(err, ret){
      var testJson_end, diffTime, speed;
      testJson_count++;
      if (testJson_count < testJson_count_max) {
        testJson();
      } else {
        if (!consoleEndPrinted) {
          consoleEndPrinted = true;
          testJson_end = Date.now();
          diffTime = Date.now() - testJson_start;
          speed = Math.round(_test_count / (diffTime / 1000));
          console.log("testJson " + _sequence_count + " sequence finished, count = " + _test_count + ", time = " + diffTime + "ms, speed = " + speed + "/s");
        }
      }
    });
  };
  for (i$ = 0, to$ = _sequence_count; i$ < to$; ++i$) {
    testJson();
  }
}, 1000 * 45);